---
// Componente de carrusel de productos con Swiper
interface Product {
  id: string;
  slug: string;
  name: string;
  image: string;
  imageMobile?: string;
  background_color?: string;
  text_color?: string;
}

export interface Props {
  products: Product[];
  className?: string;
  autoplay?: boolean;
  speed?: number;
  slidesPerView?: number;
  spaceBetween?: number;
  loop?: boolean;
  color?: string;
}

const {
  products = [],
  className = '',
  autoplay = true,
  speed = 5000,
  slidesPerView = 3,
  spaceBetween = 30,
  loop = true,
  color = '#F08C00'
} = Astro.props;

const currentLang = Astro.url.pathname.split('/')[1] === 'es' ? 'es' : 'en';

// Textos según idioma
const texts = {
  es: {
    viewMore: 'Ver más'
  },
  en: {
    viewMore: 'View more'
  }
};

const currentTexts = texts[currentLang as keyof typeof texts];

// Asegurarse de que products es un array
const productsItems = Array.isArray(products) ? products : [];

import ProductCard from './ProductCard.astro';
---

<div class={`products-carousel w-full overflow-visible py-4 pt-[180px] md:pt-[150px] sm:pt-[120px] ${className}`} data-autoplay={autoplay} data-speed={speed}>
  
  <div class="swiper-container relative w-full px-10 sm:px-8 overflow-visible">
    <div class="swiper-wrapper flex items-stretch overflow-visible">
      {productsItems.map((product) => (
        <div class="swiper-slide flex h-auto flex-shrink-0 w-auto pt-0 overflow-visible">
          <ProductCard product={product} currentLang={currentLang} viewMoreText={currentTexts.viewMore} />
        </div>
      ))}
    </div>
    
    <!-- Navegación -->
    <div class="swiper-button-next !text-white !bg-blue-500/80 !w-12 !h-12 !rounded-full hover:!bg-blue-600/90 transition-all duration-300 !border-2 !border-white/30 backdrop-blur-sm">
      
    </div>
    <div class="swiper-button-prev !text-white !bg-blue-500/80 !w-12 !h-12 !rounded-full hover:!bg-blue-600/90 transition-all duration-300 !border-2 !border-white/30 backdrop-blur-sm">
      
    </div>
  </div>
</div>



<script>
  import Swiper from 'swiper';
  import { Navigation, Autoplay } from 'swiper/modules';
  import 'swiper/css';
  import 'swiper/css/navigation';

  interface ProductsCarouselOptions {
    autoplay?: boolean;
    speed?: number;
    slidesPerView?: number;
    spaceBetween?: number;
    loop?: boolean;
  }

  class ProductsCarousel {
    private container: HTMLElement;
    private swiper: Swiper | null = null;
    private options: ProductsCarouselOptions;

    constructor(container: HTMLElement, options: ProductsCarouselOptions = {}) {
      this.container = container;
      this.options = options;
      this.init();
    }

    private init(): void {
      const swiperContainer = this.container.querySelector('.swiper-container') as HTMLElement;
      
      if (!swiperContainer) return;

      // Add event listeners to prevent swiper from handling link clicks
      const productLinks = swiperContainer.querySelectorAll('a[data-no-swipe]');
      productLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          // Stop propagation to prevent Swiper from handling the click
          e.stopPropagation();
        });
      });

      this.swiper = new Swiper(swiperContainer, {
        modules: [Navigation, Autoplay],
        slidesPerView: this.options.slidesPerView || 3,
        spaceBetween: this.options.spaceBetween || 30,
        loop: this.options.loop !== false,
        autoplay: this.options.autoplay ? {
          delay: this.options.speed || 5000,
          disableOnInteraction: false,
        } : false,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        breakpoints: {
          320: {
            slidesPerView: 1,
            spaceBetween: 20,
          },
          768: {
            slidesPerView: 2,
            spaceBetween: 30,
          },
          1024: {
            slidesPerView: this.options.slidesPerView || 3,
            spaceBetween: this.options.spaceBetween || 30,
          },
        },
        // Prevent swiper from handling clicks on links with data-no-animation
        preventClicksPropagation: true,
        preventClicks: false,
        noSwiping: true,
        noSwipingClass: 'swiper-no-swiping',
      });

      // Add swiper-no-swiping class to all links with data-no-swipe attribute
      productLinks.forEach(link => {
        link.classList.add('swiper-no-swiping');
      });
    }

    public destroy(): void {
      if (this.swiper) {
        this.swiper.destroy();
        this.swiper = null;
      }
    }
  }

  // Variable global para almacenar instancias
  let carouselInstances: ProductsCarousel[] = [];

  // Función para limpiar instancias existentes
  function cleanupCarousels() {
    carouselInstances.forEach(instance => instance.destroy());
    carouselInstances = [];
  }

  // Función para inicializar carruseles
  function initializeCarousels() {
    cleanupCarousels();
    
    const carousels = document.querySelectorAll('.products-carousel');
    carousels.forEach((element: Element) => {
      if (element instanceof HTMLElement) {
        const instance = new ProductsCarousel(element, {
          autoplay: element.dataset.autoplay !== 'false',
          speed: parseInt(element.dataset.speed || '5000', 10),
          slidesPerView: 3,
          spaceBetween: 30,
          loop: true,
        });
        carouselInstances.push(instance);
      }
    });
  }

  // Inicializar en DOMContentLoaded
  document.addEventListener('DOMContentLoaded', initializeCarousels);
  
  // Reinicializar cuando cambie el idioma
  document.addEventListener('astro:page-load', initializeCarousels);
  
  // Limpiar antes de que la página se descargue
  document.addEventListener('astro:before-preparation', cleanupCarousels);
</script> 